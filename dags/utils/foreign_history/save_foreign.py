from sqlalchemy import create_engine
import pandas as pd
import logging
from datetime import date,timedelta
import numpy as np
import concurrent.futures
from .list.HOSE import hose
from .list.HNX import hnx
from .list.UPCOM import upcom
from .list.DEV import derivative
from .list.CW  import warrant
from .foreign_history import foreign_history

logging.basicConfig(
    level=logging.INFO,                 # c·∫•p log: DEBUG / INFO / WARNING / ERROR
    format="%(asctime)s [%(levelname)s] %(message)s",  # format log
    handlers=[
        logging.StreamHandler()         # in ra console
        # c√≥ th·ªÉ th√™m FileHandler n·∫øu mu·ªën ghi log ra file
    ]
)
log=logging.getLogger(__name__)

def save_foreign_history(symbol):
    try:
        data=foreign_history(symbol,time='days',start='2000-01-01',end='2030-01-01')
        col=['M√£ CP','Th·ªùi ƒëi·ªÉm GD','T·ªïng KLGD r√≤ng', 'T·ªïng GTGD r√≤ng']
        data=data[col]
        data.columns=['symbol','time','netVol','netVal']
        if data.empty:
            msg = f"‚ö†Ô∏è Kh√¥ng c√≥ d·ªØ li·ªáu cho {symbol}, b·ªè qua l∆∞u DB."
            log.info(msg)
            return [msg]
        
        data.columns=['symbol','time','netVol','netVal']
    
        enginedb=create_engine('postgresql://vnsfintech:%40Vns123456@videv.cloud:5432/vnsfintech')
    
        data.to_sql(name=f'{symbol}',
                    schema='foreign_history',
                    con=enginedb,
                    if_exists='replace',
                    index=False
                    )
        msg = f"‚úÖ ƒê√£ l∆∞u {symbol}"
        log.info(msg)
        return [msg]
    except Exception as e:
        msg = f"‚ùå L·ªói l∆∞u {symbol}: {e}"
        log.exception(msg)
        return [msg]

def update_all_stocks(symbol_list):
    messages = []
    with concurrent.futures.ThreadPoolExecutor(max_workers=3) as executor:
        futures = [executor.submit(save_foreign_history, symbol) for symbol in symbol_list]
        for future in concurrent.futures.as_completed(futures):
            result = future.result() or []  # lu√¥n l√† list
            messages.extend(result)
    return messages

def save_all_foreign():
    print("üöÄ B·∫Øt ƒë·∫ßu c·∫≠p nh·∫≠t d·ªØ li·ªáu...")
    result = []
    result += update_all_stocks(hose)
    result += update_all_stocks(hnx)
    result += update_all_stocks(upcom)
    result += update_all_stocks(derivative)
    result += update_all_stocks(warrant)

    errors = [msg for msg in result if msg.startswith("‚ùå")]
    warnings = [msg for msg in result if msg.startswith("‚ö†Ô∏è")]

    log.info(f"üìä T·ªïng s·ªë m√£ x·ª≠ l√Ω: {len(result)}")
    log.info(f"‚ùå T·ªïng s·ªë l·ªói: {len(errors)}")
    log.info(f"‚ö†Ô∏è Kh√¥ng c√≥ d·ªØ li·ªáu: {len(warnings)}")

    if errors:
        log.warning("üìõ Chi ti·∫øt c√°c m√£ b·ªã l·ªói:")
        for err in errors:
            log.warning(err)

    log.info("üéâ Ho√†n th√†nh c·∫≠p nh·∫≠t t·∫•t c·∫£ m√£.")
    return result