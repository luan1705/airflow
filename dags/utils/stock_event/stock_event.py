from sqlalchemy import create_engine
import pandas as pd
import logging
from datetime import date,timedelta
import numpy as np
import concurrent.futures
from .event import get_event
from .list.HOSE import hose
from .list.HNX import hnx
from .list.UPCOM import upcom
from .list.DEV import derivative
from .list.CW  import warrant

logging.basicConfig(
    level=logging.INFO,                 # c·∫•p log: DEBUG / INFO / WARNING / ERROR
    format="%(asctime)s [%(levelname)s] %(message)s",  # format log
    handlers=[
        logging.StreamHandler()         # in ra console
        # c√≥ th·ªÉ th√™m FileHandler n·∫øu mu·ªën ghi log ra file
    ]
)
log=logging.getLogger(__name__)

def stock_event(symbol, max_retries=3, retry_delay=2):
    try:
        data=None
        for attempt in range(1, max_retries + 1):
            try:
                data= get_event(symbol)
                if not data.empty:
                    break  # c√≥ d·ªØ li·ªáu th√¨ tho√°t retry
                else:
                    log.warning(f"‚ö†Ô∏è {symbol}: l·∫ßn {attempt}/{max_retries} kh√¥ng c√≥ d·ªØ li·ªáu.")
            except Exception as e:
                log.error(f"‚ùå {symbol}: l·ªói get_event (l·∫ßn {attempt}/{max_retries}) - {e}", exc_info=True)
                
            if attempt < max_retries:
                import time
                time.sleep(retry_delay)
        
        if data is None or data.empty:
            msg = f"‚ö†Ô∏è {symbol}: kh√¥ng c√≥ d·ªØ li·ªáu sau {max_retries} l·∫ßn th·ª≠, b·ªè qua."
            log.info(msg)
            return msg
            
        enginedb=create_engine('postgresql://vnsfintech:%40Vns123456@videv.cloud:5432/vnsfintech')
        
        data.to_sql(
            name=symbol,
            schema="stock_event",
            con=enginedb,
            if_exists="replace",   # ho·∫∑c "append"
            index=False,
            method="multi"
        )
        msg = f"‚úÖ {symbol}: l∆∞u th√†nh c√¥ng."
        log.info(msg)
        return msg
    except Exception as e:
        msg = f"‚ùå {symbol}: l·ªói khi l∆∞u - {e}"
        log.error(msg, exc_info=True)
        return msg

def update_all_stocks(symbol_list):
    """Ch·∫°y ƒëa lu·ªìng cho 1 danh s√°ch m√£"""
    messages = []
    with concurrent.futures.ThreadPoolExecutor(max_workers=5) as executor:
        futures = {executor.submit(stock_event, sym): sym for sym in symbol_list}
        for future in concurrent.futures.as_completed(futures):
            try:
                msg = future.result()
                if msg:
                    messages.append(msg)
            except Exception as e:
                # Kh√¥ng ƒë·ªÉ task fail, v·∫´n log v√† ti·∫øp t·ª•c
                sym = futures[future]
                err_msg = f"‚ùå {sym}: task b·ªã l·ªói kh√¥ng mong mu·ªën - {e}"
                log.error(err_msg, exc_info=True)
                messages.append(err_msg)
    return messages

def save_stock_event():
    print("üöÄ B·∫Øt ƒë·∫ßu c·∫≠p nh·∫≠t d·ªØ li·ªáu...")
    result = []
    result += update_all_stocks(hose)
    result += update_all_stocks(hnx)
    result += update_all_stocks(upcom)
    result += update_all_stocks(derivative)
    result += update_all_stocks(warrant)

    # T·ªïng h·ª£p k·∫øt qu·∫£
    errors = [m for m in result if m.startswith("‚ùå")]
    skipped = [m for m in result if m.startswith("‚ö†Ô∏è")]
    success = [m for m in result if m.startswith("‚úÖ")]

    log.info(f"üìä T·ªïng s·ªë m√£ x·ª≠ l√Ω: {len(result)}")
    log.info(f"‚úÖ Th√†nh c√¥ng: {len(success)} | ‚ö†Ô∏è B·ªè qua: {len(skipped)} | ‚ùå L·ªói: {len(errors)}")

    if errors:
        log.warning("üìõ Chi ti·∫øt c√°c m√£ b·ªã l·ªói:")
        for err in errors:
            log.warning(err)

    log.info("üéâ Ho√†n th√†nh c·∫≠p nh·∫≠t t·∫•t c·∫£ m√£.")
    return result